name: CI - Docker Build and Push

on:
  push:
    branches:
      - main
      - docker-automate-feature


jobs:
  test-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: 🛒 Checkout repository
        uses: actions/checkout@v3

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🛠️ Build Frontend Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest ./frontend

      - name: 🔎 Scan Frontend Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/frontend:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: 'true'

      - name: ✅ Test Frontend Container
        run: |
          docker run --rm -d --name frontend_test -p 3000:80 ${{ secrets.DOCKER_USERNAME }}/frontend:latest
          sleep 5
          curl --fail http://localhost:3000 || (echo "Frontend container failed to respond!" && exit 1)
          docker stop frontend_test

      - name: 🚀 Push Frontend Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

      - name: 🛠️ Build Backend Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest ./Backend

      # - name: 🔎 Scan Backend Docker image with Trivy
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: ${{ secrets.DOCKER_USERNAME }}/backend:latest
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: 'true'

      - name: ✅ Test Backend Container (with secrets as env vars)
        run: |
          docker network create test_net || echo "Network test_net already exists"
          docker run -d --name mongo_test --network test_net mongo:latest
          sleep 10
          docker run --rm --name backend_test --network test_net -p 8000:8000 \
            -e PORT=${{ secrets.PORT }} \
            -e MONGO_URL=${{ secrets.MONGO_URL }} \
            ${{ secrets.DOCKER_USERNAME }}/backend:latest || (echo "Backend container failed!" && exit 1)
          docker stop mongo_test
      - name: 🔒 Push Backend Docker image      

      - name: 🚀 Push Backend Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest


# jobs:
#   test-and-push:
#     runs-on: ubuntu-latest
#     steps:
#       - name:  Checkout repository
#         uses: actions/checkout@v3

#       - name: 🔧 Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name:  Login to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name:  Build Frontend Docker image
#         run: docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest ./frontend

#       - name:  Scan Frontend Docker image with Trivy
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: ${{ secrets.DOCKER_USERNAME }}/frontend:latest
#           format: 'table'
#           exit-code: '1'   # Fail if vulnerabilities found
#           ignore-unfixed: 'true' # Ignore vulnerabilities without fixes

#       - name:  Test Frontend Container
#         run: |
#           docker run --rm -d --name frontend_test -p 3000:80 ${{ secrets.DOCKER_USERNAME }}/frontend:latest
#           sleep 5
#           curl --fail http://localhost:3000 || (echo "Frontend container failed to respond!" && exit 1)
#           docker stop frontend_test

#       - name: Push Frontend Docker image
#         run: docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

#       - name:  Build Backend Docker image
#         run: docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest ./Backend

#       - name:  Scan Backend Docker image with Trivy
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: ${{ secrets.DOCKER_USERNAME }}/backend:latest
#           format: 'table'
#           exit-code: '1'
#           ignore-unfixed: 'true'

#       - name:  Test Backend Container
#         run: |
#           docker network create test_net
#           docker run -d --rm --name mongo_test --network test_net mongo:latest
#           sleep 10
#           docker run --rm --name backend_test --network test_net -p 8000:8000 \
#             --env-file ./Backend/.env \
#             ${{ secrets.DOCKER_USERNAME }}/backend:latest || (echo "Backend container failed!" && exit 1)

#       - name:  Push Backend Docker image
#         run: docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest
