name: CI - Docker Build and Push

on:
  push:
    branches:
      - main
      - docker-automate-feature

jobs:
  test-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: 🛒 Checkout repository
        uses: actions/checkout@v3

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🛠️ Build Frontend Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest ./frontend

      - name: 🔎 Scan Frontend Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/frontend:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: 'true'

      - name: ✅ Test Frontend Container
        run: |
          docker run --rm -d --name frontend_test -p 3000:80 ${{ secrets.DOCKER_USERNAME }}/frontend:latest
          sleep 5
          curl --fail http://localhost:3000 || (echo "Frontend container failed to respond!" && exit 1)
          docker stop frontend_test

      - name: 🚀 Push Frontend Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

      - name: 🛠️ Build Backend Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest ./Backend

      # Uncomment below lines if you want to scan backend too
      # - name: 🔎 Scan Backend Docker image with Trivy
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: ${{ secrets.DOCKER_USERNAME }}/backend:latest
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: 'true'

      - name: ✅ Test Backend Container (with secrets as env vars)
        run: |
          docker network create test_net || echo "Network test_net already exists"

          # Start MongoDB
          docker run -d --rm --name mongo_test --network test_net mongo:latest
          
          # Wait and verify MongoDB readiness using mongosh container
          for i in {1..10}; do
            docker run --rm --network test_net mongo:latest mongosh "mongodb://mongo_test:27017" --eval "db.adminCommand('ping')" && break
            echo "Waiting for MongoDB to be ready... ($i)"
            sleep 3
          done

          # Start backend in detached mode
          docker run -d --rm --name backend_test --network test_net -p 8000:8000 \
            -e PORT=${{ secrets.PORT || '8000' }} \
            -e MONGO_URL=${{ secrets.MONGO_URL || 'mongodb://mongo_test:27017/appdb' }} \
            ${{ secrets.DOCKER_USERNAME }}/backend:latest

          # Wait for backend to start
          sleep 5

          # Test backend health endpoint
          curl --fail http://localhost:8000/health || \
            (echo "Backend health check failed!" && docker logs backend_test && exit 1)

          # Cleanup
          docker stop backend_test
          docker stop mongo_test
          docker network rm test_net

      - name: 🚀 Push Backend Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest
